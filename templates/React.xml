<templateSet group="React">
  <template name="rwwd" value="import React, {Component} from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;class $TM_FILENAME_BASE$ extends React.Component {&#10; constructor(props) {&#10;  super(props);&#10;&#10;  this.state = {};&#10;&#10; }&#10;&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;&#10;$TM_FILENAME_BASE$.propTypes = {&#10;&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class with constructor, empty state, proptypes and export in ES6 module system without imports. (Mostly used when React, Proptypes are provided by webpack provide plugin)" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rnwwd" value="import React, {Component} from 'react';&#10;import PropTypes from 'prop-types';&#10;import {Text } from 'react-native';&#10;import { } from 'native-base';&#10;import { } from 'react-native-elements';&#10;&#10;class $TM_FILENAME_BASE$ extends React.Component {&#10; constructor(props) {&#10;  super(props);&#10;&#10;  this.state = {};&#10;&#10; }&#10;&#10; render() {&#10;  return (&#10;   &lt;Text&gt;&#10;    $END$&#10;   &lt;/Text&gt;&#10;  );&#10; }&#10;}&#10;&#10;$TM_FILENAME_BASE$.propTypes = {&#10;&#10;};&#10;&#10;export default $TM_FILENAME_BASE$;" description="Creates a React component class with constructor, empty state, proptypes and export in ES6 module system without imports. (Mostly used when React, Proptypes are provided by webpack provide plugin)" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fccs" value="// @flow&#10;import React,{ Component}  from 'react';&#10;import { StyleSheet, Text, View } from 'react-native';&#10;type Props = {&#10; $END$&#10;};&#10;type State = {&#10; $1$&#10;};&#10;export class $TM_FILENAME_BASE$ extends React.Component&lt;Props, State&gt;{&#10; render() {&#10;  return (&#10;   &lt;View&gt;&#10;     &lt;Text style={styles.red}&gt;just red&lt;/Text&gt;&#10;   &lt;/View&gt;&#10;  );&#10; };&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  red: {&#10;    color: 'red',&#10;  }&#10;});&#10;" description="Creates a React component class with FlowTypes Styles" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="cdm2" value="componentDidMount() {&#10; $END$&#10;}&#10;" description="compentDidMount" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
    </context>
  </template>
  <template name="rtd" value=" retrieveData = async() =&gt; {&#10;    try{&#10;        $END$&#10;        }&#10;    catch(error){&#10;        console.log(error);&#10;        Analytics.addEvent(error);&#10;    }&#10;}&#10;" description="retrieveData() async method" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
    </context>
  </template>
  <template name="fccsn" value="// @flow&#10;import React,{ Component}  from 'react';&#10;import { StyleSheet } from 'react-native';&#10;import {StyleProvider,Grid,Text,Container} from 'native-base';&#10;import {scale,moderateScale,verticalScale} from '../utils/Scaling';&#10;import getTheme from '../native-base-theme/components';&#10;import platform from '../native-base-theme/variables/platform';&#10;type Props = {&#10; $END$&#10;};&#10;type State = {&#10; $1$&#10;};&#10;export default class $TM_FILENAME_BASE$ extends React.Component&lt;Props, State&gt;{&#10; render() {&#10;    return (&#10;      &lt;StyleProvider style={getTheme(platform)}&gt;&#10;          &lt;Container&gt;&#10;            &lt;Grid&gt;&#10;                &lt;Text style={styles.red}&gt;just red&lt;/Text&gt;&#10;            &lt;/Grid&gt;&#10;          &lt;/Container&gt;&#10;       &lt;/StyleProvider&gt;&#10;  );&#10; };&#10;};&#10;&#10;const styles = StyleSheet.create({&#10;  red: {&#10;    color: 'red',&#10;  }&#10;});&#10;" description="Creates a React component class with FlowTypes Styles" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="fonsc" value="fontSize:scale($size$),$END$" description="Is an instance of a class prop type required" toReformat="true" toShortenFQNames="true">
    <variable name="size" expression="" defaultValue="16" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>